{"version":3,"file":"jquery-simple-tags.min.js","sources":["../src/js/jquery.simple-tags.js"],"names":["$","SimpleTags","fn","simple_tags","opts","this","each","undefined","bind_events","$input","init","prototype","default_opts","min_length","delimiter","border_spacing","input_min_width","events","change","tags","$original_input","$container","$list","bla","console","log","extend","create_container","create_list","create_input","before","append","read_tags","update_view","clonecss","css","minHeight","outerHeight","lineHeight","width","maxHeight","marginTop","val","parseInt","self","$tag","find","remove","clone","html","add_tag","tag","trim","length","tag_exists","remove_tag","push","write_tags","index","inArray","splice","map","split","join","apply","$mirror","resize_input","display","position","top","left","padding","margin","prepend","innerWidth","replace","on","e","preventDefault","keyCode","substr","trigger","$src","props","$dest","jQuery"],"mappings":"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","sourcesContent":["/*\n * jquery-simple-tags\n * https://github.com/derapU/jquery-simple-tags\n *\n * Copyright (c) 2015 Andreas Berghaus\n * Licensed under the MIT license.\n */\n\n( function ( $ ) {\n\t\"use strict\";\n\n\tvar SimpleTags;\n\n\t$.fn.simple_tags = function ( opts ) {\n\t\treturn this.each( function () {\n\t\t\tif ( undefined === this.simple_tags ) {\n\t\t\t\treturn this.simple_tags = new SimpleTags( $( this ), opts );\n\t\t\t}\n\t\t\tthis.simple_tags.bind_events();\n\t\t} );\n\t};\n\n\tSimpleTags = function ( $input, opts ) {\n\t\tthis.init( $input, opts );\n\t\treturn this;\n\t};\n\tSimpleTags.prototype = {\n\t\tdefault_opts: {\n\t\t\tmin_length: 3,\n\t\t\tdelimiter: ',',\n\t\t\tborder_spacing:  null, // null | px\n\t\t\tinput_min_width: 30,   // in px\n\t\t\tevents: {\n\t\t\t\tchange: function ( tags ) { return tags; }\n\t\t\t}\n\t\t},\n\t\topts: null,\n\n\t\ttags: [],\n\n\t\t$original_input: null,\n\t\t$input:          null,\n\t\t$container:      null,\n\t\t$list:           null,\n\n\t\tbla: function () {\n\t\t\tconsole.log( 'muh' );\n\t\t},\n\n\t\tinit: function ( $input, opts ) {\n\t\t\t// configure and save the original field\n\t\t\tthis.opts            = $.extend( true, {}, this.default_opts, opts );\n\t\t\tthis.$original_input = $input;\n\n\t\t\t// create elements\n\t\t\tthis.create_container();\n\t\t\tthis.create_list();\n\n\t\t\t// clone original-input and append it to the list\n\t\t\tthis.create_input();\n\n\t\t\t// insert container and put original input inside\n\t\t\t// then append our taglist\n\t\t\tthis.$original_input.before( this.$container );\n\t\t\tthis.$container\n\t\t\t\t.append( this.$original_input )\n\t\t\t\t.append( this.$list );\n\n\n\t\t\t// append the input field\n\t\t\tthis.$list.append( this.$input );\n\n\t\t\t// bind events\n\t\t\tthis.bind_events();\n\n\t\t\t// update taglist with values from original input\n\t\t\tthis.tags = this.read_tags();\n\t\t\tthis.update_view();\n\t\t},\n\n\t\tcreate_container: function () {\n\t\t\tthis.$container = $( '<div class=\"simple-tags-container\">' );\n\n\t\t\t// clone some css-properties\n\t\t\tthis.$container.clonecss( this.$original_input, [\n\t\t\t\t'background-color',\n\t\t\t\t'color',\n\t\t\t\t'border-style',\n\t\t\t\t'border-color',\n\t\t\t\t'border-width',\n\t\t\t\t'float',\n\t\t\t\t'font-family',\n\t\t\t\t'font-size',\n\t\t\t\t'font-style',\n\t\t\t\t'font-weight',\n\t\t\t\t'margin-bottom',\n\t\t\t\t'margin-top',\n\t\t\t\t'margin-left',\n\t\t\t\t'margin-right',\n\t\t\t\t'text-transform',\n\t\t\t\t'text-decoration',\n\t\t\t\t'width'\n\t\t\t] ).css ( {\n\t\t\t\tminHeight:  this.$original_input.outerHeight(),\n\t\t\t\tlineHeight: '1em'\n\t\t\t} );\n\t\t},\n\t\tcreate_input: function () {\n\t\t\tthis.$input = $( '<input type=\"text\" class=\"simple-tags-tag simple-tags-input\">' )\n\t\t\t\t.css( {\n\t\t\t\t\twidth: this.opts.input_min_width,\n\t\t\t\t\tmaxHeight: this.$original_input.css( 'font-size' ),\n\t\t\t\t\tmarginTop: this.opts.border_spacing\n\t\t\t\t} )\n\t\t\t\t.clonecss( this.$original_input, [\n\t\t\t\t\t'background-color',\n\t\t\t\t\t'color'\n\t\t\t\t] )\n\t\t\t\t.val( '' );\n\t\t},\n\t\tcreate_list: function () {\n\t\t\tif ( null === this.opts.border_spacing ) {\n\t\t\t\tthis.opts.border_spacing = parseInt( this.$original_input.css( 'padding-top' ), 10 );\n\t\t\t}\n\t\t\tthis.$list = $( '<div class=\"simple-tags-list\">' ).clonecss( this.$original_input, [\n\t\t\t\t'padding-right',\n\t\t\t\t'padding-left'\n\t\t\t] );\n\t\t\tthis.$list.css( 'padding-bottom', this.opts.border_spacing + 'px' );\n\t\t},\n\n\t\tupdate_view: function () {\n\t\t\tvar self = this,\n\t\t\t\t$tag = $( '<span class=\"simple-tags-tag\">' );\n\n\t\t\tthis.tags = this.read_tags();\n\t\t\tconsole.log( this.tags );\n\n\t\t\t// add correct border-spacing\n\t\t\t$tag.css( {\n\t\t\t\tmarginTop: this.opts.border_spacing + 'px',\n\t\t\t} );\n\n\t\t\t// remove tags\n\t\t\tthis.$list.find( ':not(input).simple-tags-tag' ).remove();\n\n\t\t\t// insert tags in list\n\t\t\t$.each( this.tags, function () {\n\t\t\t\tself.$input.before( $tag.clone().html( this ) );\n\t\t\t} );\n\t\t},\n\n\n\t\t// add or remove tag to / from tag-box\n\t\tadd_tag: function ( tag ) {\n\t\t\ttag = this.trim( tag );\n\n\t\t\t// drop empty tag\n\t\t\tif ( '' === tag ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// drop short tags\n\t\t\tif ( this.opts.min_length > tag.length ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// remove duplicate-tag and append it to the end\n\t\t\tif ( true === this.tag_exists( tag ) ) {\n\t\t\t\tthis.remove_tag( tag );\n\t\t\t}\n\n\t\t\t// add to original input\n\t\t\tthis.tags.push( tag );\n\t\t\tthis.write_tags();\n\n\t\t\t// add to view\n\t\t\tthis.update_view();\n\t\t},\n\t\tremove_tag: function ( tag ) {\n\t\t\tvar index = $.inArray( tag, this.tags );\n\n\t\t\t// remove original input\n\t\t\tif ( -1 < index ) {\n\t\t\t\tthis.tags.splice( index, 1 );\n\t\t\t\tthis.write_tags();\n\t\t\t}\n\n\t\t\t// update view\n\t\t\tthis.update_view();\n\t\t},\n\t\ttag_exists: function ( tag ) {\n\t\t\treturn true === -1 < $.inArray( tag, this.tags );\n\t\t},\n\n\n\t\t// read and write tags from / to original input-field\n\t\tread_tags: function () {\n\t\t\tvar self = this;\n\t\t\treturn $.map( this.$original_input.val().split( this.opts.delimiter ), function ( tag ) {\n\t\t\t\treturn self.trim( tag ) || null;\n\t\t\t} );\n\t\t},\n\t\twrite_tags: function () {\n\t\t\tthis.$original_input.val( this.tags.join( this.opts.delimiter ) );\n\t\t\tthis.opts.events.change.apply( this, [this.tags] );\n\t\t},\n\n\n\t\t// resize the input-field to match the contents length\n\t\t$mirror: null,\n\t\tresize_input: function () {\n\t\t\tvar self    = this,\n\t\t\t\t$mirror = this.$mirror;\n\n\t\t\tif ( null === $mirror ) {\n\t\t\t\t$mirror = $( '<span>' );\n\t\t\t\t$mirror.css( {\n\t\t\t\t\tdisplay:  'block',\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\ttop:      '-100000px',\n\t\t\t\t\tleft:     '-100000px',\n\t\t\t\t\tpadding:  0,\n\t\t\t\t\tmargin:   0,\n\t\t\t\t\twidth:    'auto'\n\t\t\t\t} );\n\n\t\t\t\t// clone font-properties from inputfield\n\t\t\t\t$mirror.clonecss( self.$input, [\n\t\t\t\t\t'font-family',\n\t\t\t\t\t'font-size',\n\t\t\t\t\t'font-style',\n\t\t\t\t\t'font-weight',\n\t\t\t\t\t'letter-spacing',\n\t\t\t\t\t'line-height',\n\t\t\t\t\t'text-transform',\n\t\t\t\t\t'text-indent',\n\t\t\t\t\t'whitespace',\n\t\t\t\t\t'word-spacing'\n\t\t\t\t] );\n\n\t\t\t\t// save the mirror\n\t\t\t\t$( 'body' ).prepend( $mirror );\n\t\t\t\tthis.$mirror = $mirror;\n\t\t\t}\n\n\t\t\t// set current input-value, get the rendered width and apply\n\t\t\t// it to the input including the configured min-width to save some\n\t\t\t// place for the next character.\n\t\t\t$mirror.html( self.$input.val() );\n\t\t\tself.$input.width( parseInt( $mirror.innerWidth(), 10 )+self.opts.input_min_width + 'px' );\n\t\t},\n\n\n\t\ttrim: function ( val ) {\n\t\t\treturn val.replace( /^\\s*|\\s*$/g, '' );\n\t\t},\n\n\t\tbind_events: function () {\n\t\t\tvar self = this;\n\n\t\t\t// remove tag on click\n\t\t\tthis.$list.on( 'click', '> .simple-tags-tag', function ( e ) {\n\t\t\t\te.preventDefault();\n\t\t\t\tself.remove_tag( $( this ).html() );\n\t\t\t} );\n\n\t\t\t// autoresize inputfield and check if we have to add a tag\n\t\t\tthis.$input.on( 'keyup', function ( e ) {\n\t\t\t\t// add tag\n\t\t\t\tif ( 13 === e.keyCode || self.opts.delimiter === self.$input.val().substr( -1 ) ) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tif ( false !== self.add_tag( self.$input.val().replace( /,$/i, '', self.$input.val() ) ) ) {\n\t\t\t\t\t\tself.$input.val( '' );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tself.resize_input();\n\t\t\t} ).on( 'keydown', function ( e ) {\n\t\t\t\t// remove tag\n\t\t\t\tif ( 8 === e.keyCode && 0 === self.$input.val().length ) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tself.remove_tag( self.tags[self.tags.length-1] );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t// focus input on container-click\n\t\t\tthis.$container.on( 'click', function ( e ) {\n\t\t\t\te.preventDefault();\n\t\t\t\tself.$input.trigger( 'focus' );\n\t\t\t} );\n\t\t}\n\t};\n\n\t// little helper to clone css-properties\n\t$.fn.clonecss = function ( $src, props ) {\n\t\treturn $.each( this, function () {\n\t\t\tvar $dest = $( this );\n\t\t\treturn $.each( props, function () {\n\t\t\t\treturn $dest.css( this, $src.css( this ) );\n\t\t\t} );\n\t\t} );\n\t};\n} ( jQuery ) );\n"]}