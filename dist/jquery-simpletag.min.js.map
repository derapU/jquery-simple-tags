{"version":3,"file":"jquery-simpletag.min.js","sources":["../src/js/jquery.simpletag.js"],"names":["$","SimpleTag","fn","simpletag","opts","this","each","$input","init","prototype","default_opts","delimiter","input_min_width","tags","$original_input","$container","$list","extend","create_container","create_list","create_input","console","log","before","append","bind_events","read_tags","update_view","clonecss","css","minHeight","outerHeight","width","val","self","$tag","find","remove","clone","html","add_tag","tag","push","write_tags","remove_tag","index","inArray","splice","map","split","trim","join","$mirror","resize_input","display","position","top","left","padding","margin","prepend","parseInt","innerWidth","replace","on","e","preventDefault","keyCode","substr","length","trigger","$src","props","$dest","jQuery"],"mappings":"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","sourcesContent":["/*\n * jquery-simpletag\n * https://github.com/derapU/jquery-simpletag\n *\n * Copyright (c) 2015 Andreas Berghaus\n * Licensed under the MIT license.\n */\n\n( function( $ ) {\n\t\"use strict\";\n\n\tvar SimpleTag,\n\t\tdefault_opts;\n\n\t$.fn.simpletag = function ( opts ) {\n\t\treturn this.each( function () {\n\t\t\tthis.simpletag = new SimpleTag( $( this ), opts );\n\t\t} );\n\t};\n\n\tSimpleTag = function ( $input, opts ) {\n\t\tthis.init( $input, opts );\n\t};\n\tSimpleTag.prototype = {\n\t\tdefault_opts: {\n\t\t\tdelimiter: ',',\n\t\t\tinput_min_width: 30 // in px\n\t\t},\n\t\topts: null,\n\n\t\ttags: [],\n\n\t\t$original_input: null,\n\t\t$input:          null,\n\t\t$container:      null,\n\t\t$list:           null,\n\n\t\tinit: function ( $input, opts ) {\n\t\t\t// configure and save the original field\n\t\t\tthis.opts            = $.extend( {}, this.default_opts, opts );\n\t\t\tthis.$original_input = $input;\n\n\t\t\t// create elements\n\t\t\tthis.create_container();\n\t\t\tthis.create_list();\n\n\t\t\t// clone original-input and append it to the list\n\t\t\tthis.create_input();\nconsole.log(2);\n\t\t\t// insert container and put original input inside\n\t\t\t// then append our taglist\n\t\t\tthis.$original_input.before( this.$container );\n\t\t\tthis.$container\n\t\t\t\t.append( this.$original_input )\n\t\t\t\t.append( this.$list );\n\n\n\t\t\t// append the input field\n\t\t\tthis.$list.append( this.$input );\n\n\t\t\t// bind events\n\t\t\tthis.bind_events();\n\n\t\t\t// update taglist with values from original input\n\t\t\tthis.tags = this.read_tags();\n\t\t\tthis.update_view();\n\t\t},\n\n\t\tcreate_container: function () {\n\t\t\tthis.$container = $( '<div class=\"simpletag-container\">' );\n\n\t\t\t// clone some css-properties\n\t\t\tthis.$container.clonecss( this.$original_input, [\n\t\t\t\t'background-color',\n\t\t\t\t'color',\n\t\t\t\t'border-style',\n\t\t\t\t'border-color',\n\t\t\t\t'border-width',\n\t\t\t\t'float',\n\t\t\t\t'font-family',\n\t\t\t\t'font-size',\n\t\t\t\t'font-style',\n\t\t\t\t'font-weight',\n\t\t\t\t'line-height',\n\t\t\t\t'margin-top',\n\t\t\t\t'margin-right',\n\t\t\t\t'margin-bottom',\n\t\t\t\t'margin-left',\n\t\t\t\t'text-transform',\n\t\t\t\t'text-decoration',\n\t\t\t\t'width'\n\t\t\t] ).css ( {\n\t\t\t\tminHeight: this.$original_input.outerHeight(),\n\t\t\t} );\n\t\t},\n\t\tcreate_input: function () {\n\t\t\tthis.$input = $( '<input type=\"text\" class=\"simpletag-input\">' )\n\t\t\t\t.css( {\n\t\t\t\t\twidth: this.opts.input_min_width,\n\t\t\t\t} )\n\t\t\t\t.val( '' );\n\t\t},\n\t\tcreate_list: function () {\n\t\t\tthis.$list = $( '<div class=\"simpletag-list\">' ).clonecss( this.$original_input, [\n\t\t\t\t'padding-top',\n\t\t\t\t'padding-right',\n\t\t\t\t'padding-bottom',\n\t\t\t\t'padding-left'\n\t\t\t] );\n\t\t},\n\n\t\tupdate_view: function ( field_value ) {\n\t\t\tvar self = this,\n\t\t\t\t$tag  = $( '<span class=\"simpletag-tag\">' );\n\n\t\t\t// remove tags\n\t\t\tthis.$list.find( '.simpletag-tag' ).remove();\n\n\t\t\t// insert tags in list\n\t\t\t$.each( this.tags, function () {\n\t\t\t\tself.$input.before( $tag.clone().html( this ) );\n\t\t\t} );\n\t\t},\n\n\n\t\t// add or remove tag to / from tag-box\n\t\tadd_tag: function ( tag ) {\n\t\t\t// add to original input\n\t\t\tthis.tags.push( tag );\n\t\t\tthis.write_tags();\n\n\t\t\t// add to view\n\t\t\tthis.update_view();\n\t\t},\n\t\tremove_tag: function ( tag ) {\n\t\t\tvar index = $.inArray( tag, this.tags );\n\n\t\t\t// remove original input\n\t\t\tif ( -1 < index ) {\n\t\t\t\tthis.tags.splice( index, 1 );\n\t\t\t\tthis.write_tags();\n\t\t\t}\n\n\t\t\t// update view\n\t\t\tthis.update_view();\n\t\t},\n\n\n\t\t// read and write tags from / to original input-field\n\t\tread_tags: function () {\n\t\t\tvar self = this;\n\t\t\treturn $.map( this.$original_input.val().split( this.opts.delimiter ), function ( tag ) {\n\t\t\t\treturn self.trim( tag );\n\t\t\t} );\n\t\t},\n\t\twrite_tags: function () {\n\t\t\tthis.$original_input.val( this.tags.join( this.opts.delimiter ) );\n\t\t},\n\n\n\t\t// resize the input-field to match the contents length\n\t\t$mirror: null,\n\t\tresize_input: function () {\n\t\t\tvar self    = this,\n\t\t\t\t$mirror = this.$mirror;\n\n\t\t\tif ( null === $mirror ) {\n\t\t\t\t$mirror = $( '<span>' );\n\t\t\t\t$mirror.css( {\n\t\t\t\t\tdisplay:  'block',\n\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\ttop:      '-100000px',\n\t\t\t\t\tleft:     '-100000px',\n\t\t\t\t\tpadding:  0,\n\t\t\t\t\tmargin:   0,\n\t\t\t\t\twidth:    'auto'\n\t\t\t\t} );\n\n\t\t\t\t// clone font-properties from inputfield\n\t\t\t\t$mirror.clonecss( self.$input, [\n\t\t\t\t\t'font-family',\n\t\t\t\t\t'font-size',\n\t\t\t\t\t'font-style',\n\t\t\t\t\t'font-weight',\n\t\t\t\t\t'letter-spacing',\n\t\t\t\t\t'line-height',\n\t\t\t\t\t'text-transform',\n\t\t\t\t\t'text-indent',\n\t\t\t\t\t'whitespace',\n\t\t\t\t\t'word-spacing'\n\t\t\t\t] );\n\n\t\t\t\t// save the mirror\n\t\t\t\t$( 'body' ).prepend( $mirror );\n\t\t\t\tthis.$mirror = $mirror;\n\t\t\t}\n\n\t\t\t// set current input-value, get the rendered width and apply\n\t\t\t// it to the input including the configure min-width to save some\n\t\t\t// place for the next character.\n\t\t\t$mirror.html( self.$input.val() );\n\t\t\tself.$input.width( parseInt( $mirror.innerWidth(), 10 )+self.opts.input_min_width + 'px' );\n\t\t},\n\n\n\t\ttrim: function ( val ) {\n\t\t\treturn val.replace( /^\\s*|\\s*$/g, '' );\n\t\t},\n\n\t\tbind_events: function () {\n\t\t\tvar self = this;\n\n\t\t\t// remove tag on click\n\t\t\tthis.$list.on( 'click', '> .simpletag-tag', function ( e ) {\n\t\t\t\te.preventDefault();\n\t\t\t\tself.remove_tag( $( this ).html() );\n\t\t\t} );\n\n\t\t\t// autoresize inputfield and check if we have to add a tag\n\t\t\tthis.$input.on( 'keyup', function ( e ) {\n\t\t\t\t// add tag\n\t\t\t\tif ( 13 === e.keyCode || self.opts.delimiter === self.$input.val().substr( -1 ) ) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tself.add_tag( self.$input.val().replace( /,$/i, '', self.$input.val() ) );\n\t\t\t\t\tself.$input.val( '' );\n\t\t\t\t}\n\n\t\t\t\tself.resize_input();\n\t\t\t} ).on( 'keydown', function ( e ) {\n\t\t\t\t// remove tag\n\t\t\t\tif ( 8 === e.keyCode && 0 === self.$input.val().length ) {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tself.remove_tag( self.tags[self.tags.length-1] );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\t// focus input on container-click\n\t\t\tthis.$container.on( 'click', function ( e ) {\n\t\t\t\te.preventDefault();\n\t\t\t\tself.$input.trigger( 'focus' );\n\t\t\t} );\n\t\t}\n\t};\n\n\t// little helper to clone css-properties\n\t$.fn.clonecss = function ( $src, props ) {\n\t\treturn $.each( this, function () {\n\t\t\tvar $dest = $( this );\n\t\t\treturn $.each( props, function () {\n\t\t\t\treturn $dest.css( this, $src.css( this ) );\n\t\t\t} );\n\t\t} );\n\t};\n} ( jQuery ) );\n"]}